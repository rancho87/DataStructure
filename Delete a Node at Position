#include <bits/stdc++.h>

using namespace std;

class SinglyLinkedListNode {
    public:
        int data;
        SinglyLinkedListNode *next;

        SinglyLinkedListNode(int node_data) {
            this->data = node_data;
            this->next = nullptr;
        }
};

class SinglyLinkedList {
    public:
        SinglyLinkedListNode *head;
        SinglyLinkedListNode *tail;

        SinglyLinkedList() {
            this->head = nullptr;
            this->tail = nullptr;
        }

        void insert_node(int node_data) {
            SinglyLinkedListNode* node = new SinglyLinkedListNode(node_data);

            if (!this->head) {
                this->head = node;
            } else {
                this->tail->next = node;
            }

            this->tail = node;
        }
};

void print_singly_linked_list(SinglyLinkedListNode* node, string sep, ofstream& fout) {
    while (node) {
        fout << node->data;

        node = node->next;

        if (node) {
            fout << sep;
        }
    }
}

void free_singly_linked_list(SinglyLinkedListNode* node) {
    while (node) {
        SinglyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}

// Complete the deleteNode function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode* next;
 * };
 *
 */
 int countNode(SinglyLinkedListNode* head)
 {
     int count=0;
     while(head!=NULL)
     {
         count++;
         head=head->next;
     }
     return count;
 }
SinglyLinkedListNode* deleteNode(SinglyLinkedListNode* head, int position) {

    SinglyLinkedListNode *curr=head;
    SinglyLinkedListNode *nodeToDelete;
    SinglyLinkedListNode *newHead;
    int pos = 1;
    if(position ==0)
    {
        nodeToDelete=curr;
        newHead=curr->next;
        delete nodeToDelete;
        nodeToDelete=NULL;
        return newHead;
    } 
    while(pos < position){
    curr = curr->next;
    pos++;
    }
    if(curr->next == NULL)
        return head;
    else{
        nodeToDelete = curr->next;
        curr->next = nodeToDelete->next;
        delete nodeToDelete;
        nodeToDelete = NULL;
        return head;
    }
}


int main()
